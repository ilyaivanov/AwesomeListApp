// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Approval test for List with hardcoded data 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "link": "",
          "subtitle": "",
          "title": "Platforms",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Programming Languages",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Front-End Development",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Back-End Development",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Computer Science",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Big Data",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Theory",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Books",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Editors",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Gaming",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Development Environment",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Entertainment",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Databases",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Media",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Learn",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Security",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Content Management Systems",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Hardware",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Business",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Work",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Networking",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Decentralized Systems",
        },
        Object {
          "link": "",
          "subtitle": "",
          "title": "Miscellaneous",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Platforms
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Programming Languages
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Front-End Development
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Back-End Development
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Computer Science
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Big Data
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Theory
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Books
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Editors
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": 50,
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Object {
                "backgroundColor": "grey",
                "height": 30,
                "margin": 10,
                "width": 30,
              }
            }
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Gaming
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "height": 0,
          }
        }
      />
    </View>
  </RCTScrollView>
</View>
`;
